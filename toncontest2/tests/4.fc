forall X -> (tuple, X) ~tpop(tuple t) asm "TPOP";
int tuple_length(tuple t) asm "TLEN";
forall X -> int is_null(X x) asm "ISNULL";
forall X -> int is_int(X x) asm "<{ TRY:<{ 0 PUSHINT ADD DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int is_cell(X x) asm "<{ TRY:<{ CTOS DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int is_slice(X x) asm "<{ TRY:<{ SBITS DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int is_tuple(X x) asm "ISTUPLE";
forall X -> cell force_cast_to_cell(X x) asm "NOP";
forall X -> slice force_cast_to_slice(X x) asm "NOP";
forall X -> int force_cast_to_int(X x) asm "NOP";
forall X -> tuple force_cast_to_tuple(X x) asm "NOP";
;; Some other helpers
;; forall X -> tuple unsafe_tuple(X x) asm "NOP";
cell get_c5() asm "c5 PUSH";
builder store_builder(builder to, builder from) asm "STBR";
() set_lib_code(cell library, int x) impure asm "SETLIBCODE";
() change_lib(int lib_hash, int x) impure asm "CHANGELIB";
;; builder store_coins(builder b, int x) asm "STVARUINT16";
;; (slice, int) load_coins(slice s) asm( -> 1 0) "LDVARUINT16";



[int, tuple, cell, tuple, int] ok1_data() method_id(0) {
  tuple input = empty_tuple();
  input~tpush(10);

	tuple stack = unsafe_tuple([input]);
  cell data = begin_cell().end_cell();
  int function_selector = 120880;
  return [function_selector, stack, data, get_c7(), null()];
}

_ ok1(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
  throw_if(100, stack.at(0).at(0) != 10);
}

[int, tuple, cell, tuple, int] ok2_data() method_id(2) {
  tuple input = empty_tuple();
  input~tpush(10);
  input~tpush(100);
  input~tpush(1000);

	tuple stack = unsafe_tuple([input]);
  cell data = begin_cell().end_cell();
  int function_selector = 120880;
  return [function_selector, stack, data, get_c7(), null()];
}

_ ok2(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
  throw_if(100, stack.at(0).at(0) != 10);
  throw_if(100, stack.at(0).at(1) != 100);
  throw_if(100, stack.at(0).at(2) != 1000);
}

[int, tuple, cell, tuple, int] ok3_data() method_id(4) {
  tuple input = empty_tuple();
  input~tpush(10);
  input~tpush(100);
  input~tpush(1000);
  ;; input~tpush(10000); ;; TODO: should be more

	tuple stack = unsafe_tuple([input]);
  cell data = begin_cell().end_cell();
  int function_selector = 120880;
  return [function_selector, stack, data, get_c7(), null()];
}

_ ok3(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
  throw_if(100, stack.at(0).at(0) != 10);
  throw_if(100, stack.at(0).at(1) != 100);
  throw_if(100, stack.at(0).at(2) != 1000);
  ;; throw_if(100, stack.at(0).at(3) != 10000);
}

[int, tuple, cell, tuple, int] ok4_data() method_id(6) {
  cell c = begin_cell()
    .store_int(0, 257)
    .store_uint(0, 257)
    .end_cell();

  tuple input = empty_tuple();
  input~tpush(10);
  input~tpush(null());
  input~tpush(c);
  ;; input~tpush(c.begin_parse());
  ;; input~tpush(c);
  ;; input~tpush(c.begin_parse());
  ;; input~tpush(10000); ;; TODO: should be more

	tuple stack = unsafe_tuple([input]);
  cell data = begin_cell().end_cell();
  int function_selector = 120880;
  return [function_selector, stack, data, get_c7(), null()];
}

_ ok4(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
  dump_stack();
  throw_if(100, stack.at(0).at(0) != 10);
  throw_if(100, ~ is_null(stack.at(0).at(1)));
  ;; throw_if(100, ~ is_cell(stack.at(0).at(2)));
  ;; throw_if(100, ~ is_slice(stack.at(0).at(3)));
  ;; throw_if(100, ~ is_cell(stack.at(0).at(4)));
  ;; throw_if(100, ~ is_slice(stack.at(0).at(5)));
}
