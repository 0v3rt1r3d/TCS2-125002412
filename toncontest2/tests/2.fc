int get_single_int(cell dict, int key_len, int key) inline method_id {
  (slice res, int ok) = dict.idict_get?(key_len, key);
  throw_if(100, ~ ok);
  (_, int value) = res.load_int(key_len);
  return value;
}

cell cell_with_int(int key_len, int value) inline method_id {
  return begin_cell().store_int(value, key_len).end_cell();
}

[int, tuple, cell, tuple, int] both_empty_data() method_id(0) {
	tuple stack = unsafe_tuple([new_dict(), new_dict()]);
  cell data = begin_cell().end_cell();

  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ both_empty_test(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
  throw_if(exit_code, exit_code != 0);

  ;; Both merged and discarded are null
  throw_if(100, ~ cell_null?(stack.at(0)));
  throw_if(100, ~ cell_null?(stack.at(1)));
}

[int, tuple, cell, tuple, int] few_elements_data() method_id(2) {
  int key_len = 256;

  cell dict1 = new_dict();
  dict1~idict_set(key_len, 1, cell_with_int(key_len, 1).begin_parse());
  dict1~idict_set(key_len, 2, cell_with_int(key_len, 2).begin_parse());
  dict1~idict_set(key_len, 3, cell_with_int(key_len, 3).begin_parse());

  cell dict2 = new_dict();
  dict2~idict_set(key_len, 1, cell_with_int(key_len, 2).begin_parse());
  dict2~idict_set(key_len, 2, cell_with_int(key_len, 1).begin_parse());
  dict2~idict_set(key_len, 4, cell_with_int(key_len, 3).begin_parse());

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ few_elements(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  cell merged = stack.at(0);
  cell discarded = stack.at(1);

  { ;; Check merged
    throw_if(2, merged.get_single_int(key_len, 1) != 1);
    throw_if(2, merged.get_single_int(key_len, 2) != 2);
    throw_if(2, merged.get_single_int(key_len, 3) != 3);
    throw_if(2, merged.get_single_int(key_len, 4) != 3);
  }

  { ;; Check discarded
    throw_if(2, discarded.get_single_int(key_len, 1) != 2);
    throw_if(2, discarded.get_single_int(key_len, 2) != 1);
  }
}

[int, tuple, cell, tuple, int] first_is_empty_data() method_id(4) {
  int key_len = 256;

  cell dict1 = new_dict();

  cell dict2 = new_dict();
  dict2~idict_set(key_len, 1, cell_with_int(key_len, 1).begin_parse());
  dict2~idict_set(key_len, 50, cell_with_int(key_len, 50).begin_parse());
  dict2~idict_set(key_len, 100, cell_with_int(key_len, 100).begin_parse());

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ first_is_empty(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  ;; Check merged
  cell merged = stack.at(0);
  throw_if(100, merged.get_single_int(key_len, 1) != 1);
  throw_if(100, merged.get_single_int(key_len, 50) != 50);
  throw_if(100, merged.get_single_int(key_len, 100) != 100);

  ;; Check discarded
  cell discarded = stack.at(1);
  throw_if(2, ~ dict_empty?(discarded));
}

[int, tuple, cell, tuple, int] second_is_empty_data() method_id(6) {
  int key_len = 256;

  cell dict2 = new_dict();

  cell dict1 = new_dict();
  dict1~idict_set(key_len, 1, cell_with_int(key_len, 1).begin_parse());
  dict1~idict_set(key_len, 50, cell_with_int(key_len, 50).begin_parse());
  dict1~idict_set(key_len, 100, cell_with_int(key_len, 100).begin_parse());

  cell dict2 = new_dict();

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ second_is_empty(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  ;; Check merged
  cell merged = stack.at(0);
  throw_if(100, merged.get_single_int(key_len, 1) != 1);
  throw_if(100, merged.get_single_int(key_len, 50) != 50);
  throw_if(100, merged.get_single_int(key_len, 100) != 100);

  ;; Check discarded
  cell discarded = stack.at(1);
  throw_if(2, ~ dict_empty?(discarded));
}


[int, tuple, cell, tuple, int] all_are_intersected_data() method_id(8) {
  int key_len = 256;

  int i = 10;

  cell dict1 = new_dict();
  cell dict2 = new_dict();

  while(i > 0) {
    i = i - 1;

    dict1~idict_set(key_len, i, cell_with_int(key_len, i * 10).begin_parse());
    dict2~idict_set(key_len, i, cell_with_int(key_len, i * 20).begin_parse());
  }

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ all_are_intersected(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(9) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  cell merged = stack.at(0);
  cell discarded = stack.at(1);

  int i = 10;
  while(i > 0) {
    i = i - 1;

    throw_if(100, merged.get_single_int(key_len, i) != i * 10);
    throw_if(100, discarded.get_single_int(key_len, i) != i * 20);
  }
}

[int, tuple, cell, tuple, int] stress_test_data() method_id(10) {
  int key_len = 256;

  cell dict1 = new_dict();
  cell dict2 = new_dict();

  int i = 256;
  while(i > 0) {
    i = i - 1;

    if (i % 2) {
      dict1~idict_set(key_len, i, cell_with_int(key_len, i * 20).begin_parse());
      dict2~idict_set(key_len, i, cell_with_int(key_len, i * 10).begin_parse());
    } else {
      dict1~idict_set(key_len, i, cell_with_int(key_len, i * 10).begin_parse());
      dict2~idict_set(key_len, i, cell_with_int(key_len, i * 20).begin_parse());
    }
  }

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ stress_test(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(11) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  cell merged = stack.at(0);
  cell discarded = stack.at(1);

  int i = 256;
  while(i > 0) {
    i = i - 1;

    if (i % 2) {
      throw_if(2, merged.get_single_int(key_len, i) != i * 20);
      throw_if(2, discarded.get_single_int(key_len, i) != i * 10);
    } else {
      throw_if(2, merged.get_single_int(key_len, i) != i * 10);
      throw_if(2, discarded.get_single_int(key_len, i) != i * 20);
    }
  }
}

[int, tuple, cell, tuple, int] stress_test_2_data() method_id(12) {
  int key_len = 256;

  cell dict1 = new_dict();
  cell dict2 = new_dict();

  int i = 256;
  while(i > 0) {
    i = i - 1;

    if (i % 2) {
      dict1~idict_set(key_len, i, cell_with_int(key_len, i).begin_parse());
    } else {
      dict2~idict_set(key_len, i, cell_with_int(key_len, i).begin_parse());
    }
  }

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ stress_test_2(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(13) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  cell merged = stack.at(0);

  int i = 256;
  while(i > 0) {
    i = i - 1;
    throw_if(2, merged.get_single_int(key_len, i) != i);
  }

  cell discarded = stack.at(1);
  throw_if(2, ~ dict_empty?(discarded));
}


[int, tuple, cell, tuple, int] stress_test_3_data() method_id(14) {
  int key_len = 256;

  cell dict1 = new_dict();
  cell dict2 = new_dict();

  int i = 256;
  while(i > 0) {
    i = i - 1;

    if (i % 2) {
      dict1~idict_set(key_len, i, cell_with_int(key_len, i).begin_parse());
    } else {
      dict1~idict_set(key_len, i, cell_with_int(key_len, i).begin_parse());
      dict2~idict_set(key_len, i, cell_with_int(key_len, i).begin_parse());
    }
  }

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ stress_test_3(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(15) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  cell merged = stack.at(0);
  cell discarded = stack.at(1);

  int i = 256;
  while(i > 0) {
    i = i - 1;

    throw_if(2, merged.get_single_int(key_len, i) != i);
    if (~ i % 2) {
      throw_if(2, discarded.get_single_int(key_len, i) != i);
    }
  }
}