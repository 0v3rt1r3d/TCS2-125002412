int get_single_int(cell dict, int key_len, int key) inline method_id {
  (slice res, int ok) = dict.idict_get?(key_len, key);
  throw_if(100, ~ ok);
  (_, int value) = res.load_int(key_len);
  return value;
}

[int, tuple, cell, tuple, int] test1_data() method_id(0) {
	tuple stack = unsafe_tuple([new_dict(), new_dict()]);
  cell data = begin_cell().end_cell();

  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ test1(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
  throw_if(exit_code, exit_code != 0);

  ;; Both merged and discarded are null
  throw_if(100, ~ cell_null?(stack.at(0)));
  throw_if(100, ~ cell_null?(stack.at(1)));
}

[int, tuple, cell, tuple, int] simple_test_data() method_id(2) {
  int key_len = 256;

  slice value1 = begin_cell().store_int(1, key_len).end_cell().begin_parse();
  slice value2 = begin_cell().store_int(2, key_len).end_cell().begin_parse();
  slice value3 = begin_cell().store_int(3, key_len).end_cell().begin_parse();


  cell dict1 = new_dict();
  dict1~idict_set(key_len, 1, value1);
  dict1~idict_set(key_len, 2, value2);
  dict1~idict_set(key_len, 3, value3);

  cell dict2 = new_dict();
  dict2~idict_set(key_len, 1, value2);
  dict2~idict_set(key_len, 2, value1);
  dict2~idict_set(key_len, 4, value3);

	tuple stack = unsafe_tuple([dict1, dict2]);

  cell data = begin_cell().end_cell();
  int function_selector = 79555;
  return [function_selector, stack, data, get_c7(), null()];
}

_ simple_test(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
  int key_len = 256;
  throw_if(exit_code, exit_code != 0);

  cell merged = stack.at(0);
  cell discarded = stack.at(1);

  { ;; Check merged
    throw_if(2, merged.get_single_int(key_len, 1) != 1);
    throw_if(2, merged.get_single_int(key_len, 2) != 2);
    throw_if(2, merged.get_single_int(key_len, 3) != 3);
    throw_if(2, merged.get_single_int(key_len, 4) != 3);
  }

  { ;; Check discarded
    throw_if(2, discarded.get_single_int(key_len, 1) != 2);
    throw_if(2, discarded.get_single_int(key_len, 2) != 1);
  }
}