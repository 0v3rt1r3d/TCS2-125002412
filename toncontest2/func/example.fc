{-
TASK 1 - COUNTER.

This simple counter smart contract stores a `total` - 64-bit unsigned integer in its data
(it is guaranteed that storage data contains `total`).

When receiving an internal incoming message, contract takes a 32-bit unsigned integer from message body,
adds it to the `total` and saves the result in contract data.
Get-method `get_total` should returns actual `total` value stored in contract data.
If the body of the incoming message is less than 32 bits then it should throw ANY error.
-}

;; testable
() recv_internal(slice in_msg) impure {
  int key_size = 32;
  int stored_key_size = 64;

  throw_if(2, in_msg.slice_bits() < key_size);

  int n = in_msg.preload_uint(key_size);

  slice ds = get_data().begin_parse();
  int total = ds.preload_uint(stored_key_size);

  total += n;

  set_data(begin_cell().store_uint(total, stored_key_size).end_cell());
}

;; testable
int get_total() method_id {
  int stored_key_size = 64;

  slice ds = get_data().begin_parse();
  return ds.preload_uint(stored_key_size);
}
